
{
  "cli": "gemini",
  "defaultModel": "gemini-1.5-pro-latest",
  "systemInstruction": "You are an expert Angular instructor creating clear, beginner-friendly course content for Angular 20. Use simple language, a friendly tone, and include step-by-step explanations, code examples, ASCII diagrams or flowcharts for key concepts, coding exercises, and a multiple-choice quiz per module. Reference relevant PDFs from the specified directory and incorporate web search results for Angular 20 updates to ensure accuracy. Connect new concepts (e.g., standalone components, signals) to older Angular versions (e.g., NgModules, Zone.js) for learners transitioning from Angular 2-14.",
  "enabledTools": ["file_read", "web_search"],
  "pdfDirectory": "../Angular",
  "outputFormat": "markdown",
  "outputDirectory": "./angular-course",
  "progressFile": "./angular-course/progress_tracker.md; ./angular-course/README.md",
  "courseSettings": {
    "targetAudience": "Beginners with basic HTML, CSS, and JavaScript knowledge to advanced developers",
    "angularVersion": "20",
    "includeExercises": true,
    "includeQuizzes": true,
    "includeDiagrams": true,
    "includePDFReferences": true,
    "includeWebSearch": true,
    "includeInDepthContent":true,
    "moduleStructure": [
      {
        "module": "1",
        "title": "Introduction to Modern Angular & Setup",
        "prompt": "Generate a beginner-friendly introduction to Angular 20, explaining what Angular is, its history (AngularJS to Angular 20), key features (standalone components, signals), and benefits. Include setup instructions for Node.js, Angular CLI, and VS Code with extensions (Angular Language Service, Prettier). Provide an ASCII flowchart for the setup process, a coding exercise to create a 'Hello World' app, and a quiz. Reference PDFs in the specified directory and web search for the latest Angular CLI setup guide."
      },
      {
        "module": "2",
        "title": "Angular Fundamentals: Components & Templates",
        "prompt": "Explain Angular 20 components, including their creation, templates, and styles. Cover interpolation, property binding, event binding, and two-way binding with FormsModule. Include new control flow syntax (@if, @for) and connect to older *ngIf/*ngFor. Provide an ASCII diagram of component structure, a coding exercise to build a 'User Profile' component, and a quiz. Reference component-related PDFs and web search for Angular 20 component best practices."
      },
      {
        "module": "3",
        "title": "The Modern Way: Standalone Components Deep Dive",
        "prompt": "Explain standalone components in Angular 20, their benefits (e.g., reduced boilerplate), and how they differ from NgModules. Cover bootstrapApplication and app.config.ts. Include an ASCII flowchart for standalone app bootstrapping, a coding exercise to refactor 'Hello World' and 'User Profile' to standalone, and a quiz. Reference standalone component PDFs and web search for Angular 20 standalone patterns."
      },
      {
        "module": "4",
        "title": "Services & Dependency Injection (DI)",
        "prompt": "Describe services and dependency injection in Angular 20, including @Injectable and providedIn: 'root'. Explain DI concepts and the inject() function. Include an ASCII diagram of the DI process, a coding exercise to create a UserDataService for the 'User Profile' component, and a quiz. Reference service-related PDFs and web search for Angular 20 DI best practices."
      },
      {
        "module": "5",
        "title": "Routing & Navigation",
        "prompt": "Explain Angular 20 routing, including route setup with provideRouter, router-outlet, and routerLink. Cover route parameters and lazy loading. Include an ASCII flowchart for routing flow, a coding exercise to build a multi-page app with guarded routes, and a quiz. Reference routing PDFs and web search for Angular 20 routing updates."
      },
      {
        "module": "6",
        "title": "Angular Forms",
        "prompt": "Describe template-driven and reactive forms in Angular 20, including validation. Provide examples and an ASCII diagram of form processing, a coding exercise to build a 'User Registration' form, and a quiz. Reference forms-related PDFs and web search for Angular 20 form enhancements."
      },
      {
        "module": "7",
        "title": "Working with APIs using HttpClient",
        "prompt": "Explain HttpClient for HTTP requests and Observables in Angular 20. Cover request handling and interceptors. Include an ASCII flowchart for API request flow, a coding exercise to display and search API data, and a quiz. Reference HTTP-related PDFs and web search for Angular 20 HttpClient tips."
      },
      {
        "module": "8",
        "title": "Introduction to RxJS & State Management",
        "prompt": "Explain RxJS Observables and state management in Angular 20 using services and NgRx. Include an ASCII diagram of RxJS data flow, a coding exercise to enhance search with RxJS and add an NgRx feature, and a quiz. Reference state management PDFs and web search for Angular 20 signal-based state management."
      },
      {
        "module": "9",
        "title": "The New Reactivity Model: Angular Signals",
        "prompt": "Explain Angular 20 Signals, their benefits over Zone.js, and core APIs (signal, computed, effect). Include an ASCII flowchart for signal reactivity, a coding exercise to refactor 'User Profile' with signals, and a quiz. Reference signal-related PDFs and web search for Angular 20 signal updates."
      },
      {
        "module": "10",
        "title": "Advanced Component Design & Performance",
        "prompt": "Explain Angular 20 lifecycle hooks, content projection, custom directives, and performance optimizations (e.g., OnPush, lazy loading). Include an ASCII diagram of lifecycle hooks, a coding exercise to enhance components with a custom pipe and directive, and a quiz. Reference performance-related PDFs and web search for Angular 20 optimization techniques."
      },
      {
        "module": "11",
        "title": "Enterprise-Grade Angular: Architecture & Scalability",
        "prompt": "Explain monorepos with Nx, micro frontends, SSR, and PWAs in Angular 20. Include an ASCII flowchart for SSR rendering, a coding exercise to explore one of these topics, and a quiz. Reference architecture-related PDFs and web search for Angular 20 scalability patterns."
      },
      {
        "module": "12",
        "title": "Security, Internationalization & Accessibility",
        "prompt": "Explain Angular 20 security (XSS, CSRF), i18n, and accessibility (a11y). Include an ASCII diagram for i18n process, a coding exercise to implement one of these features, and a quiz. Reference security/i18n/a11y PDFs and web search for Angular 20 best practices."
      },
      {
        "module": "13",
        "title": "Testing Your Angular Application",
        "prompt": "Explain unit and E2E testing in Angular 20 with Jest and Cypress. Include an ASCII flowchart for testing flow, a coding exercise to test 'User Profile' and service, and a quiz. Reference testing PDFs and web search for Angular 20 testing frameworks."
      },
      {
        "module": "14",
        "title": "Building, Deployment & Continuous Integration/Delivery",
        "prompt": "Explain building and deploying Angular 20 apps, including CI/CD. Include an ASCII diagram for CI/CD pipeline, a coding exercise to deploy a multi-page app, and a quiz. Reference deployment PDFs and web search for Angular 20 deployment strategies."
      },
      {
        "module": "15",
        "title": "Beyond the Basics & Ecosystem",
        "prompt": "Explain Angular 20 ecosystem tools (Material, Elements, DevTools) and future trends. Include an ASCII diagram for Angular Elements, a coding exercise to use one tool, and a quiz. Reference ecosystem PDFs and web search for Angular 20 future trends."
      },
      {
        "module": "16",
        "title": "Final Project",
        "prompt": "Describe three final project options for Angular 20: a simple to-do list with local storage, an intermediate blog with auth and comments, and an advanced e-commerce site. Include an ASCII flowchart for the e-commerce site architecture, detailed steps for one project, and a quiz. Reference project-related PDFs and web search for Angular 20 project examples."
      },
      {
        "module": "17",
        "title": "Appendix",
        "prompt": "Create an appendix for the Angular 20 course, including a CLI command reference, troubleshooting guide, recommended resources (official docs, forums), and a glossary. Include an ASCII table for CLI commands. Reference relevant PDFs and web search for Angular 20 resources."
      }
    ]
  },
  "progressSettings": {
    "trackProgress": true,
    "modules": [
      {"module": "1", "completed": false},
      {"module": "2", "completed": false},
      {"module": "3", "completed": false},
      {"module": "4", "completed": false},
      {"module": "5", "completed": false},
      {"module": "6", "completed": false},
      {"module": "7", "completed": false},
      {"module": "8", "completed": false},
      {"module": "9", "completed": false},
      {"module": "10", "completed": false},
      {"module": "11", "completed": false},
      {"module": "12", "completed": false},
      {"module": "13", "completed": false},
      {"module": "14", "completed": false},
      {"module": "15", "completed": false},
      {"module": "16", "completed": false},
      {"module": "17", "completed": false}
    ]
  }
}
